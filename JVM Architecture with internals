JVM Architecture with internals

JVM stands for Java Virtual Machine which executes Java byte code and generates results.

JVM internally has the following partitions
=>Class Loader SubSystem
=> Runtime data area
=> Execution Engine 

1. Class Loader SubSytem
Class Loader SubSystem will load the class files onto the 'Runtime data area' using an internal loader

2. Runtime data area
=> This Runtime data area has the following subareas:-
  a. Method area
  b. Heap area
  c. Java Stack area
  d. PC Register area
  e. Native Method area

a. Method area
=> The class loader Subsystem will load the class files onto the method area.
=> While class loading static components will get the memory within the class.
=> Once the main method gets the memory within the class then it is automatically copied onto the Java stack area to the execution process.

b. Heap area
=> The location where objects are created is known as the Heap area
=> Object means one storage created in the Heap area to hold an instance member of the class.

c. Java Stack area
=> The location where methods are executed is known as the Java stack area or Execution area.
=> The main method is copied onto the Java Stack area automatically the execution process will start.

d. PC Register area
=> Progam counter (PC) Registers will hold the status of method execution in the Java stack area and monitor the execution process.
=> Every method that is executed in the Java stack area will have its PC register.

e. Native method area
=> The methods that are declared with the "Native" keyword are known as native methods and these methods internally have c/c++ code.


3. Execution Engine
=> Execution Engine is an executor of JVM and which starts the execution process from main() available in JavaStackArea.
=> This Execution Engine is also known as virtual processor.
=> This Execution Engine internally has two translators:
  a. Interpreter
  b. JIT - Compiler
